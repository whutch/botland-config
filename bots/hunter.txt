// Hunter
// Bot configuration for Bot Land (http://bot.land)
// :version: 2.6
// :license: MIT (https://github.com/whutch/botland-config/blob/master/LICENSE.txt)

// Suggested hardware: missiles 3, cloak 2, shield 1, reflect 1


init = function() {
    // Options
    use_weapons = true;  // Whether to use weapons (duh)
    use_sensors = false;  // Increases visibility but costs you a turn every ~8 turns
    avoid_mines = false;  // This doesn't work yet (the bot will reveal mines, but still walk into them)
    avoid_enemies = false;  // Whether to completely avoid enemies
    min_fight_distance = 0;  // If not zero, move away to given distance
    max_fight_distance = 0;  // If not zero, move in to given distance
    reveal_turns = 5;  // Number of turns between revealing mines (ignored if not avoiding mines)
    always_defend = 40;  // Percentage of health to always defend at (regardless of visible enemies)
    // Bot status
    is_red = (x > arenaWidth / 2);
    enemy = null;
    enemy_distance = 0;
    if (is_red) direction = "left";
    else direction = "right";
    last_life = life;
    next_reveal = 0;
}

update = function () {
    check_defend();
    if (canLayMine()) layMine();
    if (!enemy || !check_enemy(enemy))
        enemy = findClosestEnemyBot();
    if (enemy && canSense(enemy)) {
        if (!avoid_enemies && use_weapons && check_distance()) {
            try_attacking();
        }
        check_environment();
        try_moving();
    } else {
        check_environment();
        if (!canMove(direction)) {
            direction = next_direction(direction);
        }
        move(direction);
    }
};

check_defend = function() {
    if (enemy || life < last_life || life <= (life * (always_defend / 100))) {
        last_life = life;
        if (isShielded() || isCloaked() || isReflecting()) return;
        if (canShield()) shield();
        if (canCloak()) cloak();
        if (canReflect()) reflect();
    }
}

check_enemy = function() {
    if (!exists(enemy) || !canSense(enemy))
        return false;
    if (canTeleport(entity)) return true;
    if (canZap() && !isZapping() && isAdjacent(enemy)) return true;
    if (willMeleeHit(enemy)) return true;
    if (willLasersHit(enemy)) return true;
    if (willMissilesHit(enemy)) return true;
    if (willArtilleryHit(enemy)) return true;
    return false;
}

check_distance = function() {
    enemy_distance = getDistanceTo(enemy)
    if (!min_fight_distance || enemy_distance >= min_fight_distance)
        return true;
    if (!max_fight_distance || enemy_distance <= max_fight_distance)
        return true;
}

check_environment = function() {
    if (use_sensors && canActivateSensors() && !areSensorsActivated()) activateSensors();
    if (avoid_mines) {
        if (next_reveal <= 0) {
            next_reveal = reveal_turns;
            revealMines();
        } else {
            next_reveal -= 1;
        }
    }
}

try_attacking = function() {
    if (canZap() && !isZapping() && isAdjacent(enemy)) zap();
    if (willMeleeHit(enemy)) melee(enemy);
    if (willLasersHit(enemy)) fireLasers(enemy);
    if (willMissilesHit(enemy)) fireMissiles(enemy);
    if (willArtilleryHit(enemy)) fireArtillery(enemy);
}

try_moving = function() {
    if (avoid_enemies || (min_fight_distance && enemy_distance < min_fight_distance)) {
        // Run awaaaaaay!
        if (enemy.y > y && canMove("up")) move("up");
        if (enemy.y < y && canMove("down")) move("down");
        if (enemy.x > x && canMove("left")) move("left");
        move("right");
    }
    // Charge!
    if (canTeleport(enemy) && enemy_distance >= 2) teleport(enemy);
    pursue(enemy);
}

next_direction = function(direction) {
    if (direction == "left")
        if (is_red) return "up"; else return "down";
    if (direction == "up")
        if (is_red) return "right"; else return "left";
    if (direction == "right")
        if (is_red) return "down"; else return "up";
    if (direction == "down")
        if (is_red) return "left"; else return "right";
};
