// Hunter
// Bot configuration for Bot Land (http://bot.land)
// :version: 3.0
// :license: MIT (https://github.com/whutch/botland-config/blob/master/LICENSE.txt)


init = function() {
    // Options
    use_weapons = true;  // Whether to use weapons (duh)
    use_sensors = false;  // Increases visibility but costs you a turn every ~8 turns
    avoid_mines = false;  // This doesn't work yet (the bot will reveal mines, but still walk into them)
    avoid_enemies = false;  // Whether to completely avoid enemies
    alternate_moves = false;  // Whether to move at least every other turn (useful for avoiding artillery)
    min_fight_distance = 0;  // If not zero, move away to given distance
    max_fight_distance = 0;  // If not zero, move in to given distance
    reveal_turns = 5;  // Number of turns between revealing mines (ignored if not avoiding mines)
    always_defend = 40;  // Percentage of health to always defend at (regardless of visible enemies)
    // Bot status
    is_red = (x > arenaWidth / 2);
    enemy = null;
    enemy_distance = 0;
    last_life = life;
    next_reveal = 0;
    moved_last_turn = false;
    moving = false;
    // Pathing
    distance_from_edge = 3;
    calculate_path();
    if (is_red) target_point = se_bound;
    else target_point = nw_bound;
};

update = function() {
    moved_last_turn = moving;
    moving = false;
    check_defend();
    if (canLayMine())
        layMine();
    if (!enemy || !check_enemy(enemy))
        enemy = findClosestEnemyBot();
    if (enemy && canSense(enemy)) {
        if (!avoid_enemies && use_weapons && check_distance() && (!alternate_moves || moved_last_turn))
            try_attacking();
        check_environment();
        moving = true;
        try_moving();
    } else {
        check_environment();
        if (at_coord(target_point))
            target_point = next_point();
        moving = true;
        move_to_coord(target_point);
    }
};

check_defend = function() {
    if (enemy || life < last_life || life <= (life * (always_defend / 100))) {
        last_life = life;
        if (isShielded() || isCloaked() || isReflecting()) return;
        if (canShield()) shield();
        if (canCloak()) cloak();
        if (canReflect()) reflect();
    }
};

check_enemy = function() {
    if (!exists(enemy) || !canSense(enemy)) return false;
    if (canTeleport(entity)) return true;
    if (canZap() && !isZapping() && isAdjacent(enemy)) return true;
    if (willMeleeHit(enemy)) return true;
    if (willLasersHit(enemy)) return true;
    if (willMissilesHit(enemy)) return true;
    if (willArtilleryHit(enemy)) return true;
    return false;
};

check_distance = function() {
    enemy_distance = getDistanceTo(enemy);
    if (!min_fight_distance || enemy_distance >= min_fight_distance) return true;
    if (!max_fight_distance || enemy_distance <= max_fight_distance) return true;
};

check_environment = function() {
    if (use_sensors && canActivateSensors() && !areSensorsActivated()) activateSensors();
    if (avoid_mines) {
        if (next_reveal <= 0) {
            next_reveal = reveal_turns;
            revealMines();
        }
        else
            next_reveal -= 1;
    }
};

try_attacking = function() {
    if (canZap() && isAdjacent(enemy)) zap();
    if (willMeleeHit(enemy)) melee(enemy);
    if (willLasersHit(enemy)) fireLasers(enemy);
    if (willMissilesHit(enemy)) fireMissiles(enemy);
    if (willArtilleryHit(enemy)) fireArtillery(enemy);
};

try_moving = function() {
    if (avoid_enemies || (min_fight_distance && enemy_distance < min_fight_distance)) {
        // Run awaaaaaay!
        if (enemy.y > y && canMove("up")) move("up");
        if (enemy.y < y && canMove("down")) move("down");
        if (enemy.x > x && canMove("left")) move("left");
        move("right");
    }
    if (alternate_moves && !moved_last_turn && isAdjacent(enemy))
        move();
    // Charge!
    if (canTeleport(enemy) && enemy_distance >= 2) teleport(enemy);
    pursue(enemy);
};

calculate_path = function() {
    _d = distance_from_edge;
    nw_bound = coord(_d, _d);
    ne_bound = coord(arenaWidth - 1 - _d, _d);
    se_bound = coord(arenaWidth - 1 - _d, arenaHeight - 1 - _d);
    sw_bound = coord(_d, arenaHeight - 1 - _d);
};

next_point = function() {
    if (target_point == nw_bound) return ne_bound;
    if (target_point == ne_bound) return se_bound;
    if (target_point == se_bound) return sw_bound;
    if (target_point == sw_bound) return nw_bound;
};

coord = function(x_, y_) { return ((x_ << 6) | y_); };
cx = function(coord) { return ((coord & 4032) >> 6); };
cy = function(coord) { return (coord & 63); };
at_coord = function(coord) { return (x == cx(coord) && y == cy(coord)); };
move_to_coord = function(coord) { moveTo(cx(coord), cy(coord)); };
